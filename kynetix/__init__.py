import cPickle
import time
from math import exp, pi, sqrt

from kynetix.functions import *
from kynetix.errors.error import *
from kynetix.database.thermo_data import kB_J, kB_eV, h_eV


__version__ = '0.6.5'

file_header = (
    '# This file was automatically generated by Kynetix' +
    ' (https://github.com/PytLab/Kynetix).\n' +
    '# Version %s\n# Date: %s \n#\n' +
    '# Do not make changes to this file ' +
    'unless you know what you are doing\n\n') % (__version__, time.asctime())

#-------------------------------------------------------
# Some base classes for kinetic model are defined below |
#-------------------------------------------------------


class ModelShell(object):
    '''
    A non-functional parent class to be inherited by
    other tools class of kinetic model.
    '''

    def __init__(self, owner):
        self._owner = owner
        self._archived_data_dict = {}

    def update_defaults(self, defaults):
        '''
        Update values in defaults dict,
        if there are custom parameters in setup file.

        Parameters:
        -----------
        default: default attributes dict, dict.
        '''

        for parameter_name in defaults:
            if hasattr(self._owner, parameter_name):
                defaults[parameter_name] = getattr(self._owner, parameter_name)

        return defaults

    def archive_data(self, data_name, data):
        '''
        Update data dict and dump it to data file.

        Parameters:
        -----------
        data_name: key in data dict, str.

        data: value in data dict, any python data type.
        '''
        # Update data dict.
        if data_name in self._archived_variables:
            self._archived_data_dict[data_name] = data
            # Dump data dict to data file
            if self._archived_data_dict:
                with open(self._owner.data_file(), 'wb') as f:
                    cPickle.dump(self._archived_data_dict, f)

    @staticmethod
    def write2file(filename, line):
        f = open(filename, 'a')
        f.write(line)
        f.close()


class KineticCoreComponent(ModelShell):
    '''
    Base class to be herited by core components of micro kinetic model,
    e.g. solver, simulator...
    '''

    def __init__(self, owner):
        ModelShell.__init__(self, owner)

    @staticmethod
    def get_kTST(Ga, T):
        '''
        Function to get rate constants according to Transition State Theory.

        Parameters:
        -----------
        Ga: free energy barrier, float.

        T: thermodynamics constants, floats.
        '''

        kTST = kB_eV*T/h_eV*exp(-Ga/(kB_eV*T))

        return kTST

    @staticmethod
    def get_kCT(Ea, Auc, act_ratio, p, m, T, f=1.0):
        '''
        Function to get rate constant/collision rate according to Collision Theory.

        Parameters:
        -----------
        Ea: energy barrier( NOT free energy barrier), float.

        Auc: area of unitcell (m^-2), float.

        act_ratio: area of active sites/area of unitcell, float(<= 1.0).

        p: partial pressure of gas, float.

        m: absolute mass of molecule (kg), float.

        f: factor accounts for a further reduction in the sticking probability,
           if particle with certain initial states are not efficiently steered
           along the MEP, and reflected by a higher barrier, float(<= 1.0).

        T: temperature (K), float.
        '''
        # check parameters
        if act_ratio > 1.0:
            msg = 'active area ratio must be less than 1.0'
            raise ParameterError(msg)
        if f > 1.0:
            msg = 'factor f must be less than 1.0'
            raise ParameterError(msg)

        S = f*act_ratio*exp(-Ea/(kB_eV*T))      # sticking coefficient
        kCT = S*(p*Auc)/(sqrt(2*pi*m*kB_J*T))  # rate

        return kCT
