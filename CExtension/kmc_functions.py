# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
C extension module for kMC Analysis providing key functions.
"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kmc_functions', [dirname(__file__)])
        except ImportError:
            import _kmc_functions
            return _kmc_functions
        if fp is not None:
            try:
                _mod = imp.load_module('_kmc_functions', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kmc_functions = swig_import_helper()
    del swig_import_helper
else:
    import _kmc_functions
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def match_elements(types, elements, DIM1, grid_shape):
    """
    Function to go through grid to match elements local configuration.

    Python function:
    ----------------
    match_elements(types, stripped_elements, stripped_coordinates, grid_shape)

    Parameters:
    -----------
    types: The site types at the lattice points as a list, list of str.

    stripped_elements: stripped elements list(without wildcards),
                       numpy.array of str.

    stripped_coordinates: stripped relative coordinates list(without wildcards),
                          2d numpy.array of float.

    grid_shape: shape of grid, tuple of int.

    Returns:
    --------
    n_success: number of successful matching, int

    """
    return _kmc_functions.match_elements(types, elements, DIM1, grid_shape)

def match_elements_list(types, nrow, ncol, elements_list, DIM1, grid_shape):
    """
    Function to get total matching success number for,
    a list of stripped elements list and coordinates.

    Python function prototype:
    --------------------------
    match_elements_list(types,
                        stripped_elements_list,
                        stripped_coordinates_list,
                        grid_shape)

    Parameters:
    -----------
    types: The site types at the lattice points as a list, list of str.

    stripped_elements_list: a list of stripped_elements, a **1D** string list.

    stripped_coordinates_list: a list of stripped coordinates, 2D string list.

    grid_shape: shape of grid, tuple of int.

    Returns:
    --------
    total_nsuccess: total number of successful matching, int

    """
    return _kmc_functions.match_elements_list(types, nrow, ncol, elements_list, DIM1, grid_shape)

def collect_coverage(TYPES, POSSIBLE_TYPES, ARGOUT_ARRAY1):
    """
    Function to get current coverages of possible types.

    Python function prototype:
    --------------------------
    collect_coverage(types, possible_types, ncvgs)

    Parameters:
    -----------
    types: The site types at the lattice points as a list, list of str.

    possible_types: possible species type in grid.

    ncvgs: number of possible species type.

    Returns:
    --------
    cvgs: coverages of possible types, numpy.array int

    """
    return _kmc_functions.collect_coverage(TYPES, POSSIBLE_TYPES, ARGOUT_ARRAY1)
# This file is compatible with both classic and new-style classes.


